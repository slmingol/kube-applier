// Code generated by MockGen. DO NOT EDIT.
// Source: kube/client.go

// Package kube is a generated GoMock package.
package kube

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockClientInterface is a mock of ClientInterface interface
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// Apply mocks base method
func (m *MockClientInterface) Apply(path, namespace string, dryRun, prune, kustomize bool) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", path, namespace, dryRun, prune, kustomize)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Apply indicates an expected call of Apply
func (mr *MockClientInterfaceMockRecorder) Apply(path, namespace, dryRun, prune, kustomize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockClientInterface)(nil).Apply), path, namespace, dryRun, prune, kustomize)
}

// NamespaceAnnotations mocks base method
func (m *MockClientInterface) NamespaceAnnotations(namespace string) (KAAnnotations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamespaceAnnotations", namespace)
	ret0, _ := ret[0].(KAAnnotations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NamespaceAnnotations indicates an expected call of NamespaceAnnotations
func (mr *MockClientInterfaceMockRecorder) NamespaceAnnotations(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamespaceAnnotations", reflect.TypeOf((*MockClientInterface)(nil).NamespaceAnnotations), namespace)
}

// NamespaceAnnotationsBatch mocks base method
func (m *MockClientInterface) NamespaceAnnotationsBatch(namespaces []string) (map[string]KAAnnotations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamespaceAnnotationsBatch", namespaces)
	ret0, _ := ret[0].(map[string]KAAnnotations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NamespaceAnnotationsBatch indicates an expected call of NamespaceAnnotationsBatch
func (mr *MockClientInterfaceMockRecorder) NamespaceAnnotationsBatch(namespaces interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamespaceAnnotationsBatch", reflect.TypeOf((*MockClientInterface)(nil).NamespaceAnnotationsBatch), namespaces)
}
